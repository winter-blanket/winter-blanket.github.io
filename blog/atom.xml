<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://your-docusaurus-test-site.com/blog</id>
    <title>겨울이불의 아카이브 Blog</title>
    <updated>2023-06-27T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://your-docusaurus-test-site.com/blog"/>
    <subtitle>겨울이불의 아카이브 Blog</subtitle>
    <icon>https://your-docusaurus-test-site.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Design System 흉내를 위해 Figma 힐끗보기]]></title>
        <id>https://your-docusaurus-test-site.com/blog/understand-design-system-and-figma</id>
        <link href="https://your-docusaurus-test-site.com/blog/understand-design-system-and-figma"/>
        <updated>2023-06-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Design System Component 디자인을 위해 Figma Auto Layout, Property 기능을 써본 과정]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="design-system을-알아보고-싶었던-이유">Design System을 알아보고 싶었던 이유<a href="#design-system을-알아보고-싶었던-이유" class="hash-link" aria-label="Design System을 알아보고 싶었던 이유에 대한 직접 링크" title="Design System을 알아보고 싶었던 이유에 대한 직접 링크">​</a></h2><p>Design System을 처음 알게 된 계기는 첫 회사에서 새로운 제품을 런칭 준비하면서 Design System 적용을 시작했을 때였다. 프로덕트 디자인에 대한 막연한 관심이야 많았지만, 업무에 도움 될만한 배경 지식을 어떻게 쌓아야 할지에 대해선 전혀 감이 없었다. 그러던 와중에 알게 된 Design System은 첫 인상부터 굉장히 흥미로웠다. 당시 알아보았던 바로는 Design System은 <a href="https://atomicdesign.bradfrost.com/chapter-2/" target="_blank" rel="noopener noreferrer">Atomic Design Methodology</a>에 기반하고 있다. 가장 작은 디자인 요소에서 시작해서 그 요소들을 합치고 조합해나가는 과정에서 새로운 Component가 만들어진다. 디자인과 관련된 영역은 미적 감수성이 있어야만 들여다볼 수 있다고 생각했던 멋모르는 나에게 이해하기 명확하다는 점만으로도 더 자세히 들여다보고 싶다는 생각이 들었다. </p><p><full-image><img loading="lazy" src="https://atomicdesign.bradfrost.com/images/content/atomic-design-process.png" alt="Atomic Design Methodology" class="img_ev3q"></full-image>
<full-caption>Atomic Design Methodology의 디자인 전개 과정</full-caption></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="일단-한-번-써보기">일단 한 번 써보기<a href="#일단-한-번-써보기" class="hash-link" aria-label="일단 한 번 써보기에 대한 직접 링크" title="일단 한 번 써보기에 대한 직접 링크">​</a></h2><p>모름지기 무언가 새로운 지식을 배울려면 그 지식을 활용한 프로젝트를 실제로 만들어 보는 게 가장 빠르다는 지론을 가지고 있다. 마침 포트폴리오용 웹페이지를 하나 만들어야겠다, 나만의 디자인 시스템을 아주 기초적이고 가볍게라도 만들어보면 어떨까? 라는 생각을 했다. 다 만들고나서 보니 static한 포트폴리오 페이지 하나를 위해서 Design System에서 쓰이는 기능을 쓴다는건 분명 오버 스펙이었지만, 가볍게 쓰던 툴의 고급 기능을 써봤다는 것 만으로도 재밌는 경험을 할 수 있다. 결과적으로 Design System 흉내를 살짝 내보려고 Figma의 고급 기능을 힐끗 가져와본 셈이다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="figma의-auto-layout과-property">Figma의 Auto Layout과 Property<a href="#figma의-auto-layout과-property" class="hash-link" aria-label="Figma의 Auto Layout과 Property에 대한 직접 링크" title="Figma의 Auto Layout과 Property에 대한 직접 링크">​</a></h2><p>살짝 다른 얘기지만 Figma는 UI Design이 아니여도 활용할 여지가 굉장히 다양한 툴이다. <etc>(개인에게는 모든 기능이 무료라는 점이 가장 중요하다.)</etc> 발표자료나 문서 디자인에 쓰기에도 괜찮아서 유료 프로그램인 파워포인트를 대체하기에도 괜찮다. 벡터 기반이 아니어서 편집 디자인에 쓰기엔 제약이 있다고 들었지만 그래도 왠만한 시각 디자인에는 두루 활용할 수 있다. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="auto-layout">Auto Layout<a href="#auto-layout" class="hash-link" aria-label="Auto Layout에 대한 직접 링크" title="Auto Layout에 대한 직접 링크">​</a></h3><iframe src="https://www.youtube.com/embed/TyaGpGDFczw" title="YouTube video player" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe><p>Auto Layout은 오브젝트의 배치와 정렬을 알아서 맞춰주는 기능이라, 앞서 말한 발표자료 제작 같은 상황에서 활용하곤 했다. <etc>한국인이 늘 그렇듯이</etc> 특별히 사용법을 찾아보지 않고 일단 써보면서 익혔었는데 평소 이런 디자인 툴에 익숙하거나 약간의 센스만 있다면 그럭저럭 익힐 수 있다. 하지만 이번에는 피그마 기초도 조금 익혀보자는 목표가 있었으므로 유튜브에 정리된 영상을 보며 기능을 익혀갔다. 유튜브 가이드 영상이 워낙 잘 만들어져있어서 기초적인 디자인을 하는 데는 전혀 지장이 없을 만큼 주요 기능을 쉽게 이해할 수 있었다.</p><p><img loading="lazy" alt="오토 레이아웃 기능으로 만든 디자인" src="/assets/images/screenshot-design-with-auto-layout-86deb80487afc7abccc18d6b17dbc0d9.png" width="2830" height="282" class="img_ev3q"></p><p>덕분에 전에는 할 줄 모르던 오브젝트 배치가 가능해졌다. 예를 들면 위와 같은 모양에서 회사 이름은 왼편에, 재직 기간과 직무 이름은 오른편에 고정되어 있고, 그 사이에 남는 공간에 회사를 설명하는 주요 키워드가 알아서 중간에 배치되길 바랬다. 이전이라면 각각을 그룹화한 다음에 간격 정렬 버튼을 눌러서 배치했겠지만, 이 경우 배치한 오브젝트의 길이가 조금이라도 바뀌면 문제가 생긴다. 간격 정렬 버튼은 눌렀을 때 그 상태 기준으로 정렬해주기 때문에 그 이후에 오브젝트의 상태가 바뀌었다면 다시 버튼을 눌러가며 조정해야 하기 때문이다. 반면 이번에 Auto Spacing 기능도 같이 익히면서 사이 간격이 자동으로 조절되도록 Auto layout을 걸 수 있게 되었다. </p><p><left-image><img loading="lazy" alt="Auto Spacing 없이 정렬했을 때" src="/assets/images/screenshot-not-auto-spacing-77ad1d6fa14db167cefb1845c009a5f4.png" width="476" height="316" class="img_ev3q"></left-image>
<right-image><img loading="lazy" alt="Auto Spacing을 걸었을 때" src="/assets/images/screenshot-auto-spacing-33a4dbdfdde7bde78e96baf3d5d1be24.png" width="476" height="316" class="img_ev3q"></right-image>
<left-caption>Auto Spacing 없이 좌측 정렬했을 때 : 자식 오브젝트들이 왼편에 쏠려서 정렬된다.
</left-caption>
<right-caption>Auto Spacing을 걸었을 때 : 자식 오브젝트들이 사이 공간을 알아서 채우면서 양끝을 꽉 채우며 정렬된다.
</right-caption></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="display--flex-사용법-익히기">display : flex 사용법 익히기<a href="#display--flex-사용법-익히기" class="hash-link" aria-label="display : flex 사용법 익히기에 대한 직접 링크" title="display : flex 사용법 익히기에 대한 직접 링크">​</a></h4><p>디자인할 때는 신나서 했지만 막상 개발할 때가 오니, 간격 조정을 어떻게 해야 하나 고민이었다. Figma에서 간단한 CSS는 바로 만들어주기는 하는데, 막상 개발할 때는 안 쓰게 되더라 정도로 알고 있었다. 하지만 난 복잡한 구조도 아니고 자동 생성된 내용을 보고 참고는 될 거 같아서 살펴봤는데 덕분에 <code>display : flex</code>를 다루는 법을 알 수 있었다. </p><p><center-image><img loading="lazy" alt="피그마에서 자동 생성되는 CSS의 예시 스크린샷" src="/assets/images/screenshot-css-in-figma-480aa839799a8b50359491f870c6382c.png" width="692" height="1578" class="img_ev3q"></center-image>
<full-caption>피그마에서 볼 수 있는 자동 생성 CSS. 마침 이번 개발을 진행할 때 피그마의 이 기능이 업데이트되면서 사용법이 조금 바뀌었다. 평소에는 이런 개발자용 정보가 보이지 않다가, 화면 상단의 토글 버튼을 눌러서 개발자 모드로 바꾸면 개발자를 위한 상세 정보가 나오는 방식이다.</full-caption></p><p>CSS를 배운지도 너무 오래돼서 기억하는거라곤 <code>display : block, display : inline-block</code> 정도였다. <code>flex</code>는 배우긴 했지만 막상 쓸 일이 없어서 어떤 용도였는지도 까먹고 있었다. 위의 화면은 Auto spacing을 걸어놓은 오브젝트를 클릭한 상태에서 개발자 모드를 켰을 때의 상태다. 간단히 보자면 대충 아래와 같은 방식으로 Figma의 Auto Layout 설정을 그대로 화면에 옮길 수 있다. </p><ol><li>Auto Layout을 건 오브젝트라면 <code>display : flex</code>를 추가한다. </li><li>Layout 방향에 따라 <code>flex-direction</code>을 추가한다. </li><li>자식 오브젝트의 정렬을 어떻게 썼는지에 따라 <code>align-items, justify-content</code>를 적절히 사용한다. </li></ol><p>예를 들면, 아래와 같은 케이스들이 있다.</p><p><full-image><img loading="lazy" alt="Auto Layout의 종류와 해당 CSS" src="/assets/images/type-of-auto-layout-c81a74c67730eb9987f1904f60298dc7.png" width="920" height="1168" class="img_ev3q"></full-image></p><p>자동 정렬되는 방향이 수평이면 <code>flex-direction : row</code>, 사이 공간을 넣어줘야 한다면 <code>justify-content : space-between</code>, 그리고 쏠려야 하는 위치가 어딘지에 따라서 <code>align-items</code>를 넣어주면 된다. </p><p>일단 한 번 규칙을 익히고 나니 그 다음은 쉬웠다. 결국 이렇게 정렬된 오브젝트의 나열과 조합이기 때문에 계속 반복해서 적용하면 되기 때문이다. 다만 가끔씩 위치를 강제 지정할 때마다 쓰는 <code>position : relative, absolute</code>랑 같이 쓰다보면 원하는대로 화면이 그려지지 않는 경우가 있었다. 이 경우 적당히 wrapper 역할을 할 div를 하나 더 씌워서 <code>position</code> 속성을 적용하곤 했다. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="property">Property<a href="#property" class="hash-link" aria-label="Property에 대한 직접 링크" title="Property에 대한 직접 링크">​</a></h3><iframe src="https://www.youtube.com/embed/iIq8FLt1hUY" title="YouTube video player" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe><p>디자이너분들이 작업할 떄 옆에서 구경하면서 버튼 하나로 아이콘이 사라졌다, 모양이 바뀌었다 하는 걸 봤을 때 편리해보여서 어떤 기능인지 찾아봤었다. 사용자의 상호작용에 따라서, 혹은 상황에 따라서 하나의 Component가 다양한 형태를 가질 수 있다. 이러한 가짓수를 속성화해서 각 속성 사이를 간편하게 오고갈 수 있도록하는 기능이 Property이다. 결과적으론 간단한 포트폴리오 페이지 안에서 다양한 Component 변수가 필요하진 않기 때문에 기능 사용법을 익히면서 가볍게만 사용해보았다.</p><p><center-image><img loading="lazy" alt="프로퍼티 적용 예시" src="/assets/images/property-example-eb9eb1229f449ace7f0a0a3e7c1f88e1.png" width="918" height="1076" class="img_ev3q"></center-image></p><p>예를 들면 내가 만든 디자인은 위와 같은 종류의 배경색과 내부 글자색을 활용한다. 배경색이 하얗거나, 메인 컬러거나, 투명한 경우를 각각 프로퍼티로 설정해두면 디자인을 하다가 문득 배경색을 바꿔보고 싶을 때 버튼 클릭 한 번으로 간편하게 바꿀 수 있다. 디자인 단계에서는 이 기능을 크게 활용할 일이 없었지만, CSS를 더 효율적으로 설정하는 방법을 익힐 수 있었다. 예를 들면 Property에 해당하는 내용을 아래와 같이 설정한다. </p><div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockTitle_Ktv7">/src/css/custom.css</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token selector class" style="color:rgb(255, 121, 198)">.bg-color-white</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--grayscale-color-white</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">color</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--font-color-dark</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.bg-color-white</span><span class="token selector" style="color:rgb(255, 121, 198)"> *</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">color</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--font-color-dark</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.bg-color-primary</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--primary-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--font-color-light</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.bg-color-primary</span><span class="token selector" style="color:rgb(255, 121, 198)"> *</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--font-color-light</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.bg-color-empty</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">background-color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token color">transparent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">border</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> solid </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--border-sm</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--grayscale-color-200</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--font-color-light</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token selector class" style="color:rgb(255, 121, 198)">.bg-color-empty</span><span class="token selector" style="color:rgb(255, 121, 198)"> *</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token property">color</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">var</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">--font-color-light</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>예전이라면 각 element에 class로 고유한 이름을 짓고, CSS로 꾸며주는 방식을 사용했다. 이번에는 미리 어떻게 꾸밀지 설정해둔 class 이름을 필요한 element class에 추가해주는 방식으로 구현했다. 모양과 용도가 전혀 다른 element여도 배경색이 메인 컬러라면 <code>.bg-color-primary</code>를 추가해주는 식이다. 이렇게 하면 꾸밈 설정은 CSS에서 한 번만 설정하고, HTML이 그려지는 곳에서 적재적소에 class 이름을 추가해주면 되기 때문에 CSS에 중복 내용이 발생하는 걸 줄일 수 있었다. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="마치며">마치며<a href="#마치며" class="hash-link" aria-label="마치며에 대한 직접 링크" title="마치며에 대한 직접 링크">​</a></h2><p>처음 디자인을 시작할 땐 나름 특이한 디자인을 해보고 싶어서 Pinterest나 여러 자료를 찾아봤지만, 아니나 다를까 쉽지 않았다. 목표를 너무 어렵게 잡아서 완료를 못하곤 했으니 일단 완성하자는 데 의의를 두었다. 모든 디자인 요소를 배치하는 데 Auto Layout을 쓰니 일일이 위치를 잡아줄 필요가 없어서 편리했다.
설명하다보니 개발 단계에서 배웠던 내용을 위에 미리 다뤘지만, 실제로는 디자인을 끝내고 나서 좀 더 사전 공부를 하는 시간이 있었다. 단순한 HTML + CSS 구조 밖에 다뤄보지 않았기 때문에 React의 기초 개념을 살펴봤다. 그리고 오랜만에 들어가는 Docusaurus 사용자 가이드 페이지를 전체적으로 훑어보고 개발 환경 준비를 시작했다. </p><p><series-bookmark><a href="/blog/create-personal-website-with-docusaurus">1. 웅덩이 파는 데 포크레인 써보기</a>
<current-post><a href="/blog/understand-design-system-and-figma">2. Design System 흉내를 위해 Figma 힐끗 보기</a></current-post>
</series-bookmark></p>]]></content>
        <category label="Docusaurus로 개인 홈페이지 만들기 (2)" term="Docusaurus로 개인 홈페이지 만들기 (2)"/>
        <category label="프로그래밍 공부 기록" term="프로그래밍 공부 기록"/>
        <category label="Figma" term="Figma"/>
        <category label="Design System" term="Design System"/>
        <category label="React" term="React"/>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="Github Pages" term="Github Pages"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[웅덩이 파는 데 포크레인 써보기]]></title>
        <id>https://your-docusaurus-test-site.com/blog/create-personal-website-with-docusaurus</id>
        <link href="https://your-docusaurus-test-site.com/blog/create-personal-website-with-docusaurus"/>
        <updated>2023-06-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docusaurus로 개인 홈페이지 만들기의 A to Z]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="docusaurus로-개인-홈페이지-만들기">Docusaurus로 개인 홈페이지 만들기<a href="#docusaurus로-개인-홈페이지-만들기" class="hash-link" aria-label="Docusaurus로 개인 홈페이지 만들기에 대한 직접 링크" title="Docusaurus로 개인 홈페이지 만들기에 대한 직접 링크">​</a></h2><p>블로그를 겸하는 개인 홈페이지를 만들고 싶다는 생각을 꽤 오래전부터 해왔다. 시도했던 적도 많고 다양한 툴을 사용했다. 만드는 게 어려워서 포기한 적도 있고, 블로그라고 할 만큼 꾸준히 글 쓰는 걸 실패해서 포기한 적도 많았다. 워드프레스, 노션, Docusaurus 등 다양한 도구를 써봤는데 Docusaurus는 그 중 단연 난이도가 높았던 방식이다. React에 대한 이해가 필요하고 당연히 기초적인 프로그래밍이 가능해야 한다. 다만 프로그래밍 난이도가 높다는 건 당연히 그만큼 자유도가 높다는 뜻이기 때문에 가장 끌렸던 방식이기도 했다. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="개인-홈페이지를-만드는-다양한-도구들">개인 홈페이지를 만드는 다양한 도구들<a href="#개인-홈페이지를-만드는-다양한-도구들" class="hash-link" aria-label="개인 홈페이지를 만드는 다양한 도구들에 대한 직접 링크" title="개인 홈페이지를 만드는 다양한 도구들에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="워드프레스">워드프레스<a href="#워드프레스" class="hash-link" aria-label="워드프레스에 대한 직접 링크" title="워드프레스에 대한 직접 링크">​</a></h3><p><full-image><img loading="lazy" alt="워드프레스 홈페이지 메인 화면" src="/assets/images/homepage_wordpress-a08b2c43582af114cbf200149918c835.png" width="3358" height="1592" class="img_ev3q"></full-image>
<full-caption>워드프레스 홈페이지</full-caption></p><p>한 10년 전에는 노코드 홈페이지 제작은 곧 <a href="https://wordpress.com/ko/" target="_blank" rel="noopener noreferrer">워드프레스</a>였지만, 요즘은 Wix 등 더 사용자 친화적인 도구들이 많이 나와서 워드프레스를 쓰는 경우는 잘 보지 못하는 것 같다. 학생 시절에 홈페이지 제작 외주를 하면서 꽤 깊게 다뤄봤는데 관리용 페이지가 잘되어 있어서 홈페이지 외주용으로는 제격이었다. 다만 디자인을 깔끔하게 만들기에는 CSS가 묘하게 깨지는 감이 있었고, PHP 기반이어서 HTML, CSS 정도만 아는 상태에서 커스터마이징에 여러 한계가 있었다. 그러한 한계를 방대한 커뮤니티에서 찾을 수 있는 플러그인으로 해결하곤 하지만, 당연히 플러그인마다 디자인 스타일이 다르다. 워드프레스는 사용했던 도구 중 디자인 측면에서 퀄리티를 높이기가 가장 어려운 편이었다. 다만 내가 겪었던 워드프레스는 거의 10년 전 기준이니 현재는 당시 겪었던 문제가 많이 개선됐을 거라 생각한다. </p><p>장점</p><ul><li>설치와 함께 알아서 생성되는 관리용 페이지</li><li>방대한 써드파티 커뮤니티</li></ul><p>단점</p><ul><li>디자인 완성도를 끌어올리기 어려움</li><li>관련 자료나 커뮤니티가 대부분 영어 기반</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="노션">노션<a href="#노션" class="hash-link" aria-label="노션에 대한 직접 링크" title="노션에 대한 직접 링크">​</a></h3><p><full-image><img loading="lazy" alt="노션 홈페이지 메인 화면" src="/assets/images/homepage_notion-36edbf8062744dd498af12056df44063.png" width="3358" height="1592" class="img_ev3q"></full-image>
<full-caption>노션 홈페이지</full-caption></p><p>전천후 만능 도구로 쓰이는 <a href="https://notion.so" target="_blank" rel="noopener noreferrer">노션</a>이다보니 개인 블로그로 꾸민 사례도 쉽게 찾아볼 수 있다. 디자인적 완성도는 말할 것도 없고 페이지 하나하나를 꾸미는 재미는 가장 쉽고 자유롭다. 노션으로 글을 써서 SNS에 올린 적도 있었고 꽤 많은 내용을 셋팅했지만 웹 유입이 불리하다는 점 때문에 오래 쓰긴 어려웠다. 우피 같은 도구를 쓰면 구글 애널리틱스를 붙일 수 있지만 어디까지나 방문한 사람에 대한 정보를 알 수 있을 뿐, 노션 페이지 자체가 알아서 구글 검색에 노출되게 할 순 없었다. 나 스스로도 구글에 자료를 찾을 때 노션 페이지가 검색된 기억은 거의 없었다. 가끔씩 노션 페이지를 보게 되는 경우는 검색된 웹페이지에서 노션 페이지 링크를 걸어놓아서 클릭해서 넘어갔을 때 뿐이었다. 반드시 수익화를 하고 싶었던 것은 아니지만 그래도 아무도 보지 않을 글을 꾸준히 쓰는 건 어려울 게 뻔했다. 노션은 그런 점에서 자연스런 유입 증가가 애초에 불가능할 것처럼 보였기 때문에 장기적인 수단으로 쓰기엔 맞지 않다고 생각했다. </p><p>장점</p><ul><li>가장 간편한 사용성만으로 가장 예쁜 디자인을 만들 수 있음</li><li>다양한 노션 템플릿을 참고할 수 있음</li></ul><p>단점</p><ul><li>웹 유입이 매우 불리함</li><li>방문자 분석 등, 본격적으로 웹페이지처럼 쓰려면 <a href="https://www.oopy.io" target="_blank" rel="noopener noreferrer">oopy</a>같은 써드파티 도구가 반드시 필요함</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="docusaurus">Docusaurus<a href="#docusaurus" class="hash-link" aria-label="Docusaurus에 대한 직접 링크" title="Docusaurus에 대한 직접 링크">​</a></h3><p><full-image><img loading="lazy" alt="Docusaurus 홈페이지 메인 화면" src="/assets/images/homepage_docusaurus-8ad731746b52ef10e44bb531c463458e.png" width="3358" height="1526" class="img_ev3q"></full-image>
<full-caption>Docusaurus 홈페이지</full-caption></p><p><a href="https://docusaurus.io" target="_blank" rel="noopener noreferrer">Docusaurus</a>를 처음 알게 된 건 회사 업무 때문에 사용자 가이드 웹페이지를 만들어야 했을 때였다. 사용자 가이드 제작에 개발 리소스를 투입할 수 없는 상황이었기 때문에 기본적인 프로그래밍이 가능한 내 능력만으로 웹페이지 개발이 손쉽게 가능해야 했다. 동시에 가이드 내용 자체는 일반적인 문서 작업 처럼 진행할 수 있다는 점이 장점이었다. 사용자 가이드 제작용 서비스로는 <a href="https://www.gitbook.com" target="_blank" rel="noopener noreferrer">Gitbook</a>도 있고, 요즘은 노션을 주로 사용하는 것 같다. 당시에는 노션을 잘 몰랐고 Gitbook은 유료 결제가 월별 구독으로 들어가야 하는 점이 번거로웠다. 큰 금액은 아니었지만 Docusaurus는 라이브러리라 무료이고, 프로그래밍이 전혀 불가능한 사람이 관리할 상황을 고려해야 하진 않았기 때문에 결과적으로 Docusaurus로 제작했었다. </p><p>Docusaurus는 기본적으로 사용자 가이드와 같은 Docs 관리용 라이브러리지만 개인/사업체용 웹페이지 제작용으로 쓰기에도 적절하다. 블로그와 Static page 제작을 지원하기 때문이다. 다만 Markdown, React에 대한 이해가 반드시 필요하다. 또한 Docusaurus 순정 상태를 거의 그대로 유지하지 않는 이상 소스 코드 충돌이나 기타 버그가 발생할 수 있는데 프로그래밍이 가능하지 않은 사람이라면 대처가 어렵다는 단점이 있다. 애초에 &lt;서비스&gt;가 아니라 &lt;라이브러리&gt;기 때문에 개발자가 타깃이고, 다만 모든 페이지를 직접 다 개발하는 것이 번거로운 사람을 위해 템플릿과 같은 역할을 한다고 보는 것이 맞다. 이런 특징 때문에 나처럼 개발자로 먹고 살 순 없지만, 프로그래밍을 툴처럼 사용하는 기초적인 능력이 있는 사람에게는 면허 없이 포크레인을 써서 땅을 파는 것과 같은(?) 효과를 발휘할 수 있다. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="웅덩이-파는-데-포크레인-써보기">웅덩이 파는 데 포크레인 써보기<a href="#웅덩이-파는-데-포크레인-써보기" class="hash-link" aria-label="웅덩이 파는 데 포크레인 써보기에 대한 직접 링크" title="웅덩이 파는 데 포크레인 써보기에 대한 직접 링크">​</a></h2><p>처음 개인 홈페이지를 만들고 싶다고 생각했을 때 사실 어떤 내용을 보여주고 싶은지에 대한 계획은 구체적으로 없었다. 그저 개인적인, 그리고 홍보용 공간을 갖고 싶었고, 더 단순하게는 코딩 개인 프로젝트를 해보고 싶었다. <etc>(원래 무언가를 야매로 배운 사람이 욕심은 더 많은 법이다.)</etc> 퇴사 후 자기계발 시간을 가지게 되면서 진지하게 홈페이지 계획을 짜보니, 결과적으로 Docusaurus를 쓰겠다는 선택은 다소 웅덩이 파겠다고 포크레인을 동원한게 아닐까 하는 생각도 들었다. 그러나 장기적인 관점에서는 어떻게 이 곳이 확장될지 알 수 없고, 더 많은 자유도를 가질 수 있다는 점에서, 그리고 무엇보다 개발 과정에서 많은 것을 배웠고 재밌다는 점에서 좋은 선택이었다고 생각한다. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="무엇을-배웠을까">무엇을 배웠을까<a href="#무엇을-배웠을까" class="hash-link" aria-label="무엇을 배웠을까에 대한 직접 링크" title="무엇을 배웠을까에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-디자인--design-system-구현을-위한-figma의-auto-layout-property-기능-써보기">1. 디자인 : Design System 구현을 위한 Figma의 Auto Layout, Property 기능 써보기<a href="#1-디자인--design-system-구현을-위한-figma의-auto-layout-property-기능-써보기" class="hash-link" aria-label="1. 디자인 : Design System 구현을 위한 Figma의 Auto Layout, Property 기능 써보기에 대한 직접 링크" title="1. 디자인 : Design System 구현을 위한 Figma의 Auto Layout, Property 기능 써보기에 대한 직접 링크">​</a></h3><p>일단 만들고 보자는 생각으로 덤벼들었더니 예상하지 못한 어려움이 곳곳에 있었고, 결과적으로 더 많은 걸 배울 수 있었다. 위에 적었듯이 하나의 소프트웨어 제품을 만들 때 진행하는 단계를 간략하게 진행한 셈이었다. PM으로 일하면서 옆에서 구경만 했었던 Design System(이라고 하기엔 몹시 부끄럽지만) 기반의 Component 요소를 만들기 위해 Figma의 Auto Layout, Property 기능을 써보았다. Auto Layout 정도는 가끔씩 Figma로 간단한 디자인을 할 때 써보긴 했지만 이번에는 자동 생성되는 CSS를 같이 보면서 덩달아 CSS 다루는 법도 익힐 수 있었다. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-개발-준비--react의-컨셉-이해-docusaurus-파악하기">2. 개발 준비 : React의 컨셉 이해, Docusaurus 파악하기<a href="#2-개발-준비--react의-컨셉-이해-docusaurus-파악하기" class="hash-link" aria-label="2. 개발 준비 : React의 컨셉 이해, Docusaurus 파악하기에 대한 직접 링크" title="2. 개발 준비 : React의 컨셉 이해, Docusaurus 파악하기에 대한 직접 링크">​</a></h3><p>예전 회사에서 처음 Docusaurus를 쓸 때는 React를 전혀 모르는 상태였고, 그래도 사용은 가능했지만 가이드에 적힌 명령어를 전혀 이해하지 못하고 기계적으로 따라하다보니 커스터마이징이나 문제 상황에서 대처할 수 있는 여지가 굉장히 적었다. 그래서 이번에는 기초 개념이라도 React를 공부하고 써보자는 생각을 했고 노마드 코더의 무료 강의가 큰 도움이 되었다.
Docusaurus를 처음 써 본 지도 시간이 꽤 흘러서 현재는 Docusaurus2가 나온 상태이다. 아주 가볍게 사용하는 용도라면 크게 달라진 점이 없지만 내부 API 구조가 꽤 바뀐 모양이었다. 이번에는 레이아웃도 꽤 많이 건드릴 생각이었기 때문에 <a href="https://docusaurus.io" target="_blank" rel="noopener noreferrer">사용자 가이드 페이지</a>를 좀 더 자세히 살펴보며 파악했다. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-개발--디자인-커스터마이징과-docusaurus-swizzle-이해하기">3. 개발 : 디자인 커스터마이징과 Docusaurus Swizzle 이해하기<a href="#3-개발--디자인-커스터마이징과-docusaurus-swizzle-이해하기" class="hash-link" aria-label="3. 개발 : 디자인 커스터마이징과 Docusaurus Swizzle 이해하기에 대한 직접 링크" title="3. 개발 : 디자인 커스터마이징과 Docusaurus Swizzle 이해하기에 대한 직접 링크">​</a></h3><p>Docusaurus 설치 직후 보게 되는 기본적인 디자인 레이아웃은 요즘 가장 흔히 볼 수 있는 깔끔한, 반응형 디자인으로 구성되어 있다. 그럼에도 당연히 커스터마이징은 필요하다. 인덱스 페이지의 내용을 전부 바꿔야 하고, 색상, 폰트, 간격 등을 조정해야 한다. 이 정도 셋팅은 예상했는지 설치 직후에 이미 style.css 파일이 생성되어 있다. 그래서 CSS 만으로 가능한 변화는 React에 대한 이해가 전혀 없어도 가능하다. 다만 동적인 변수값을 활용해야 하는 등, 정적인 디자인 변경 이상의 커스터마이징을 하려면 Docusaurus 라이브러리 코드를 직접 건드리는 작업이 필요하다. 이번 홈페이지 제작에서 가장 많은 삽질을 하고 시간을 보낸 단계가 바로 이 때였다. 내가 원했던 걸 100% 구현할 수 없었지만 그래도 대부분은 구현하고, 나중에 응용할 수 있겠다는 자신감을 얻었다. </p><p>Docusaurus는 Theme 커스터마이징을 지원하는 데 이를 <a href="https://docusaurus.io/docs/swizzling" target="_blank" rel="noopener noreferrer">Swizzle</a>이라고 소개하고 있다. 간단히 말하면 Docusaurus에 이미 구현되어 있는 React Component 파일을 사용자가 수정할 수 있는 장치이다. 물론 이런 별도의 장치가 없더라도 라이브러리인 이상 어떻게든 수정은 가능하지만 이후 라이브러리 패치에 따른 호환성을 장담하기 어렵고, 나와 같은 초보 개발자에게는 불가능한 방법이다. 호환성을 완전히 보장할 순 없지만 나의 커스터마이징이 미칠 영향력을 판단하면서 손쉽게 내가 수정해야 하는 파일에 접근할 수 있도록 도움을 주는 것이 Swizzle의 역할이다. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-배포--github-pages-사용법-익히기">4. 배포 : Github Pages 사용법 익히기<a href="#4-배포--github-pages-사용법-익히기" class="hash-link" aria-label="4. 배포 : Github Pages 사용법 익히기에 대한 직접 링크" title="4. 배포 : Github Pages 사용법 익히기에 대한 직접 링크">​</a></h3><p><full-image><img loading="lazy" alt="Github Pages 홈페이지 메인 화면" src="/assets/images/homepage_githubpages-1af2f2b81c029bf98c690671a08575cb.png" width="3358" height="1526" class="img_ev3q"></full-image>
<full-caption>Github Pages 홈페이지</full-caption></p><p>개발이 끝났으면 이제 배포해야 할 때다. 몇 년 전에 웹사이트 개발을 배우던 초기에 배포와 도메인 연결 개념을 이해하고 사용법을 익히기까지 꽤 어려움을 겪었었다. 그 때는 아주 단순하게 HTML + CSS + Jquery로 연습하던 시절이라 웹호스팅 사이트에 호스팅과 도메인을 결제하고 FTP로 소스 코드를 올린다는게 내가 알고 있는 배포 방식이었다. 이 방식은 현재도 유효하지만 월별 유지 비용이 든다는 단점이 있다. 그래서 개인 홈페이지 제작에 여러 무료 호스팅 방법이 활용되곤 하는 데 <a href="https://pages.github.com" target="_blank" rel="noopener noreferrer">Github Pages</a>는 그 수단 중 하나이다. </p><p>Github에서 계정당 1개의 username.github.io 도메인을 지원하는데 Github repository와 연결되어 호스팅 서버와 도메인을 한 번에 해결할 수 있다. 처음 써봤을 때는 배포 후에 제대로 도메인에 웹사이트가 표시되지 않아서 애를 먹었는데, 이번 프로젝트에서는 원활하게 배포를 진행할 수 있었다. </p><p>이제부터 이어지는 포스팅에서 그동안 배웠던 것과 문제를 해결한 과정을 순서대로 기록해둘 생각이다. </p><p><series-bookmark><current-post><a href="/blog/create-personal-website-with-docusaurus">1. 웅덩이 파는 데 포크레인 써보기</a></current-post>
<a href="/blog/understand-design-system-and-figma">2. Design System 흉내를 위해 Figma 힐끗 보기</a>
</series-bookmark></p>]]></content>
        <category label="Docusaurus로 개인 홈페이지 만들기 (1)" term="Docusaurus로 개인 홈페이지 만들기 (1)"/>
        <category label="프로그래밍 공부 기록" term="프로그래밍 공부 기록"/>
        <category label="Figma" term="Figma"/>
        <category label="Design System" term="Design System"/>
        <category label="React" term="React"/>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="Github Pages" term="Github Pages"/>
    </entry>
</feed>