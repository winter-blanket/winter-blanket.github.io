<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://your-docusaurus-test-site.com/blog</id>
    <title>겨울이불의 아카이브 Blog</title>
    <updated>2023-06-26T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://your-docusaurus-test-site.com/blog"/>
    <subtitle>겨울이불의 아카이브 Blog</subtitle>
    <icon>https://your-docusaurus-test-site.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[웅덩이 파는 데 포크레인 써보기]]></title>
        <id>https://your-docusaurus-test-site.com/blog/create-personal-website-with-docusaurus</id>
        <link href="https://your-docusaurus-test-site.com/blog/create-personal-website-with-docusaurus"/>
        <updated>2023-06-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docusaurus로 개인 홈페이지 만들기의 A to Z]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="docusaurus로-개인-홈페이지-만들기">Docusaurus로 개인 홈페이지 만들기<a href="#docusaurus로-개인-홈페이지-만들기" class="hash-link" aria-label="Docusaurus로 개인 홈페이지 만들기에 대한 직접 링크" title="Docusaurus로 개인 홈페이지 만들기에 대한 직접 링크">​</a></h2><p>블로그를 겸하는 개인 홈페이지를 만들고 싶다는 생각을 꽤 오래전부터 해왔다. 시도했던 적도 많고 다양한 툴을 사용했다. 만드는 게 어려워서 포기한 적도 있고, 블로그라고 할 만큼 꾸준히 글 쓰는 걸 실패해서 포기한 적도 많았다. 워드프레스, 노션, Docusaurus 등 다양한 도구를 써봤는데 Docusaurus는 그 중 단연 난이도가 높았던 방식이다. React에 대한 이해가 필요하고 당연히 기초적인 프로그래밍이 가능해야 한다. 다만 프로그래밍 난이도가 높다는 건 당연히 그만큼 자유도가 높다는 뜻이기 때문에 가장 끌렸던 방식이기도 했다. </p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="개인-홈페이지를-만드는-다양한-도구들">개인 홈페이지를 만드는 다양한 도구들<a href="#개인-홈페이지를-만드는-다양한-도구들" class="hash-link" aria-label="개인 홈페이지를 만드는 다양한 도구들에 대한 직접 링크" title="개인 홈페이지를 만드는 다양한 도구들에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="워드프레스">워드프레스<a href="#워드프레스" class="hash-link" aria-label="워드프레스에 대한 직접 링크" title="워드프레스에 대한 직접 링크">​</a></h3><p><full-image><img loading="lazy" alt="워드프레스 홈페이지 메인 화면" src="/assets/images/homepage_wordpress-a08b2c43582af114cbf200149918c835.png" width="3358" height="1592" class="img_ev3q"></full-image>
<full-caption>워드프레스 홈페이지</full-caption></p><p>한 10년 전에는 노코드 홈페이지 제작은 곧 <a href="https://wordpress.com/ko/" target="_blank" rel="noopener noreferrer">워드프레스</a>였지만, 요즘은 Wix 등 더 사용자 친화적인 도구들이 많이 나와서 워드프레스를 쓰는 경우는 잘 보지 못하는 것 같다. 학생 시절에 홈페이지 제작 외주를 하면서 꽤 깊게 다뤄봤는데 관리용 페이지가 잘되어 있어서 홈페이지 외주용으로는 제격이었다. 다만 디자인을 깔끔하게 만들기에는 CSS가 묘하게 깨지는 감이 있었고, PHP 기반이어서 HTML, CSS 정도만 아는 상태에서 커스터마이징에 여러 한계가 있었다. 그러한 한계를 방대한 커뮤니티에서 찾을 수 있는 플러그인으로 해결하곤 하지만, 당연히 플러그인마다 디자인 스타일이 다르다. 워드프레스는 사용했던 도구 중 디자인 측면에서 퀄리티를 높이기가 가장 어려운 편이었다. 다만 내가 겪었던 워드프레스는 거의 10년 전 기준이니 현재는 당시 겪었던 문제가 많이 개선됐을 거라 생각한다. </p><p>장점</p><ul><li>설치와 함께 알아서 생성되는 관리용 페이지</li><li>방대한 써드파티 커뮤니티</li></ul><p>단점</p><ul><li>디자인 완성도를 끌어올리기 어려움</li><li>관련 자료나 커뮤니티가 대부분 영어 기반</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="노션">노션<a href="#노션" class="hash-link" aria-label="노션에 대한 직접 링크" title="노션에 대한 직접 링크">​</a></h3><p><full-image><img loading="lazy" alt="노션 홈페이지 메인 화면" src="/assets/images/homepage_notion-36edbf8062744dd498af12056df44063.png" width="3358" height="1592" class="img_ev3q"></full-image>
<full-caption>노션 홈페이지</full-caption></p><p>전천후 만능 도구로 쓰이는 <a href="https://notion.so" target="_blank" rel="noopener noreferrer">노션</a>이다보니 개인 블로그로 꾸민 사례도 쉽게 찾아볼 수 있다. 디자인적 완성도는 말할 것도 없고 페이지 하나하나를 꾸미는 재미는 가장 쉽고 자유롭다. 노션으로 글을 써서 SNS에 올린 적도 있었고 꽤 많은 내용을 셋팅했지만 웹 유입이 불리하다는 점 때문에 오래 쓰긴 어려웠다. 우피 같은 도구를 쓰면 구글 애널리틱스를 붙일 수 있지만 어디까지나 방문한 사람에 대한 정보를 알 수 있을 뿐, 노션 페이지 자체가 알아서 구글 검색에 노출되게 할 순 없었다. 나 스스로도 구글에 자료를 찾을 때 노션 페이지가 검색된 기억은 거의 없었다. 가끔씩 노션 페이지를 보게 되는 경우는 검색된 웹페이지에서 노션 페이지 링크를 걸어놓아서 클릭해서 넘어갔을 때 뿐이었다. 반드시 수익화를 하고 싶었던 것은 아니지만 그래도 아무도 보지 않을 글을 꾸준히 쓰는 건 어려울 게 뻔했다. 노션은 그런 점에서 자연스런 유입 증가가 애초에 불가능할 것처럼 보였기 때문에 장기적인 수단으로 쓰기엔 맞지 않다고 생각했다. </p><p>장점</p><ul><li>가장 간편한 사용성만으로 가장 예쁜 디자인을 만들 수 있음</li><li>다양한 노션 템플릿을 참고할 수 있음</li></ul><p>단점</p><ul><li>웹 유입이 매우 불리함</li><li>방문자 분석 등, 본격적으로 웹페이지처럼 쓰려면 <a href="https://www.oopy.io" target="_blank" rel="noopener noreferrer">oopy</a>같은 써드파티 도구가 반드시 필요함</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="docusaurus">Docusaurus<a href="#docusaurus" class="hash-link" aria-label="Docusaurus에 대한 직접 링크" title="Docusaurus에 대한 직접 링크">​</a></h3><p><full-image><img loading="lazy" alt="Docusaurus 홈페이지 메인 화면" src="/assets/images/homepage_docusaurus-8ad731746b52ef10e44bb531c463458e.png" width="3358" height="1526" class="img_ev3q"></full-image>
<full-caption>Docusaurus 홈페이지</full-caption></p><p><a href="https://docusaurus.io" target="_blank" rel="noopener noreferrer">Docusaurus</a>를 처음 알게 된 건 회사 업무 때문에 사용자 가이드 웹페이지를 만들어야 했을 때였다. 사용자 가이드 제작에 개발 리소스를 투입할 수 없는 상황이었기 때문에 기본적인 프로그래밍이 가능한 내 능력만으로 웹페이지 개발이 손쉽게 가능해야 했다. 동시에 가이드 내용 자체는 일반적인 문서 작업 처럼 진행할 수 있다는 점이 장점이었다. 사용자 가이드 제작용 서비스로는 <a href="https://www.gitbook.com" target="_blank" rel="noopener noreferrer">Gitbook</a>도 있고, 요즘은 노션을 주로 사용하는 것 같다. 당시에는 노션을 잘 몰랐고 Gitbook은 유료 결제가 월별 구독으로 들어가야 하는 점이 번거로웠다. 큰 금액은 아니었지만 Docusaurus는 라이브러리라 무료이고, 프로그래밍이 전혀 불가능한 사람이 관리할 상황을 고려해야 하진 않았기 때문에 결과적으로 Docusaurus로 제작했었다. </p><p>Docusaurus는 기본적으로 사용자 가이드와 같은 Docs 관리용 라이브러리지만 개인/사업체용 웹페이지 제작용으로 쓰기에도 적절하다. 블로그와 Static page 제작을 지원하기 때문이다. 다만 Markdown, React에 대한 이해가 반드시 필요하다. 또한 Docusaurus 순정 상태를 거의 그대로 유지하지 않는 이상 소스 코드 충돌이나 기타 버그가 발생할 수 있는데 프로그래밍이 가능하지 않은 사람이라면 대처가 어렵다는 단점이 있다. 애초에 &lt;서비스&gt;가 아니라 &lt;라이브러리&gt;기 때문에 개발자가 타깃이고, 다만 모든 페이지를 직접 다 개발하는 것이 번거로운 사람을 위해 템플릿과 같은 역할을 한다고 보는 것이 맞다. 이런 특징 때문에 나처럼 개발자로 먹고 살 순 없지만, 프로그래밍을 툴처럼 사용하는 기초적인 능력이 있는 사람에게는 면허 없이 포크레인을 써서 땅을 파는 것과 같은(?) 효과를 발휘할 수 있다. </p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="웅덩이-파는-데-포크레인-써보기">웅덩이 파는 데 포크레인 써보기<a href="#웅덩이-파는-데-포크레인-써보기" class="hash-link" aria-label="웅덩이 파는 데 포크레인 써보기에 대한 직접 링크" title="웅덩이 파는 데 포크레인 써보기에 대한 직접 링크">​</a></h2><p>처음 개인 홈페이지를 만들고 싶다고 생각했을 때 사실 어떤 내용을 보여주고 싶은지에 대한 계획은 구체적으로 없었다. 그저 개인적인, 그리고 홍보용 공간을 갖고 싶었고, 더 단순하게는 코딩 개인 프로젝트를 해보고 싶었다. <etc>(원래 무언가를 야매로 배운 사람이 욕심은 더 많은 법이다.)</etc> 퇴사 후 자기계발 시간을 가지게 되면서 진지하게 홈페이지 계획을 짜보니, 결과적으로 Docusaurus를 쓰겠다는 선택은 다소 웅덩이 파겠다고 포크레인을 동원한게 아닐까 하는 생각도 들었다. 그러나 장기적인 관점에서는 어떻게 이 곳이 확장될지 알 수 없고, 더 많은 자유도를 가질 수 있다는 점에서, 그리고 무엇보다 개발 과정에서 많은 것을 배웠고 재밌다는 점에서 좋은 선택이었다고 생각한다. </p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="무엇을-배웠을까">무엇을 배웠을까<a href="#무엇을-배웠을까" class="hash-link" aria-label="무엇을 배웠을까에 대한 직접 링크" title="무엇을 배웠을까에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-디자인--design-system-구현을-위한-figma의-auto-layout-property-기능-써보기">1. 디자인 : Design System 구현을 위한 Figma의 Auto Layout, Property 기능 써보기<a href="#1-디자인--design-system-구현을-위한-figma의-auto-layout-property-기능-써보기" class="hash-link" aria-label="1. 디자인 : Design System 구현을 위한 Figma의 Auto Layout, Property 기능 써보기에 대한 직접 링크" title="1. 디자인 : Design System 구현을 위한 Figma의 Auto Layout, Property 기능 써보기에 대한 직접 링크">​</a></h3><p>일단 만들고 보자는 생각으로 덤벼들었더니 예상하지 못한 어려움이 곳곳에 있었고, 결과적으로 더 많은 걸 배울 수 있었다. 위에 적었듯이 하나의 소프트웨어 제품을 만들 때 진행하는 단계를 간략하게 진행한 셈이었다. PM으로 일하면서 옆에서 구경만 했었던 Design System(이라고 하기엔 몹시 부끄럽지만) 기반의 Component 요소를 만들기 위해 Figma의 Auto Layout, Property 기능을 써보았다. Auto Layout 정도는 가끔씩 Figma로 간단한 디자인을 할 때 써보긴 했지만 이번에는 자동 생성되는 CSS를 같이 보면서 덩달아 CSS 다루는 법도 익힐 수 있었다. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-개발-준비--react의-컨셉-이해-평범한-html--css--js로-구성되는-웹페이지-개발과-무엇이-다를까">2. 개발 준비 : React의 컨셉 이해, 평범한 HTML + CSS + JS로 구성되는 웹페이지 개발과 무엇이 다를까<a href="#2-개발-준비--react의-컨셉-이해-평범한-html--css--js로-구성되는-웹페이지-개발과-무엇이-다를까" class="hash-link" aria-label="2. 개발 준비 : React의 컨셉 이해, 평범한 HTML + CSS + JS로 구성되는 웹페이지 개발과 무엇이 다를까에 대한 직접 링크" title="2. 개발 준비 : React의 컨셉 이해, 평범한 HTML + CSS + JS로 구성되는 웹페이지 개발과 무엇이 다를까에 대한 직접 링크">​</a></h3><p>예전 회사에서 처음 Docusaurus를 쓸 때는 React를 전혀 모르는 상태였고, 그래도 사용은 가능했지만 가이드에 적힌 명령어를 전혀 이해하지 못하고 기계적으로 따라하다보니 커스터마이징이나 문제 상황에서 대처할 수 있는 여지가 굉장히 적었다. 그래서 이번에는 기초 개념이라도 React를 공부하고 써보자는 생각을 했고 노마드 코더의 무료 강의가 큰 도움이 되었다. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-개발--디자인-커스터마이징과-docusaurus-swizzle-이해하기">3. 개발 : 디자인 커스터마이징과 Docusaurus Swizzle 이해하기<a href="#3-개발--디자인-커스터마이징과-docusaurus-swizzle-이해하기" class="hash-link" aria-label="3. 개발 : 디자인 커스터마이징과 Docusaurus Swizzle 이해하기에 대한 직접 링크" title="3. 개발 : 디자인 커스터마이징과 Docusaurus Swizzle 이해하기에 대한 직접 링크">​</a></h3><p>Docusaurus 설치 직후 보게 되는 기본적인 디자인 레이아웃은 요즘 가장 흔히 볼 수 있는 깔끔한, 반응형 디자인으로 구성되어 있다. 그럼에도 당연히 커스터마이징은 필요하다. 인덱스 페이지의 내용을 전부 바꿔야 하고, 색상, 폰트, 간격 등을 조정해야 한다. 이 정도 셋팅은 예상했는지 설치 직후에 이미 style.css 파일이 생성되어 있다. 그래서 CSS 만으로 가능한 변화는 React에 대한 이해가 전혀 없어도 가능하다. 다만 동적인 변수값을 활용해야 하는 등, 정적인 디자인 변경 이상의 커스터마이징을 하려면 Docusaurus 라이브러리 코드를 직접 건드리는 작업이 필요하다. 이번 홈페이지 제작에서 가장 많은 삽질을 하고 시간을 보낸 단계가 바로 이 때였다. 내가 원했던 걸 100% 구현할 수 없었지만 그래도 대부분은 구현하고, 나중에 응용할 수 있겠다는 자신감을 얻었다. </p><p>Docusaurus는 Theme 커스터마이징을 지원하는 데 이를 <a href="https://docusaurus.io/docs/swizzling" target="_blank" rel="noopener noreferrer">Swizzle</a>이라고 소개하고 있다. 간단히 말하면 Docusaurus에 이미 구현되어 있는 React Component 파일을 사용자가 수정할 수 있는 장치이다. 물론 이런 별도의 장치가 없더라도 라이브러리인 이상 어떻게든 수정은 가능하지만 이후 라이브러리 패치에 따른 호환성을 장담하기 어렵고, 나와 같은 초보 개발자에게는 불가능한 방법이다. 호환성을 완전히 보장할 순 없지만 나의 커스터마이징이 미칠 영향력을 판단하면서 손쉽게 내가 수정해야 하는 파일에 접근할 수 있도록 도움을 주는 것이 Swizzle의 역할이다. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-배포--github-pages-사용법-익히기">4. 배포 : Github Pages 사용법 익히기<a href="#4-배포--github-pages-사용법-익히기" class="hash-link" aria-label="4. 배포 : Github Pages 사용법 익히기에 대한 직접 링크" title="4. 배포 : Github Pages 사용법 익히기에 대한 직접 링크">​</a></h3><p><full-image><img loading="lazy" alt="Github Pages 홈페이지 메인 화면" src="/assets/images/homepage_githubpages-1af2f2b81c029bf98c690671a08575cb.png" width="3358" height="1526" class="img_ev3q"></full-image>
<full-caption>Github Pages 홈페이지</full-caption></p><p>개발이 끝났으면 이제 배포해야 할 때다. 몇 년 전에 웹사이트 개발을 배우던 초기에 배포와 도메인 연결 개념을 이해하고 사용법을 익히기까지 꽤 어려움을 겪었었다. 그 때는 아주 단순하게 HTML + CSS + Jquery로 연습하던 시절이라 웹호스팅 사이트에 호스팅과 도메인을 결제하고 FTP로 소스 코드를 올린다는게 내가 알고 있는 배포 방식이었다. 이 방식은 현재도 유효하지만 월별 유지 비용이 든다는 단점이 있다. 그래서 개인 홈페이지 제작에 여러 무료 호스팅 방법이 활용되곤 하는 데 <a href="https://pages.github.com" target="_blank" rel="noopener noreferrer">Github Pages</a>는 그 수단 중 하나이다. </p><p>Github에서 계정당 1개의 username.github.io 도메인을 지원하는데 Github repository와 연결되어 호스팅 서버와 도메인을 한 번에 해결할 수 있다. 처음 써봤을 때는 배포 후에 제대로 도메인에 웹사이트가 표시되지 않아서 애를 먹었는데, 이번 프로젝트에서는 원활하게 배포를 진행할 수 있었다. </p><hr><p>이제부터 이어지는 포스팅에서 그동안 배웠던 것과 문제를 해결한 과정을 순서대로 기록해둘 생각이다.</p>]]></content>
        <category label="프로그래밍 공부 기록" term="프로그래밍 공부 기록"/>
        <category label="Figma" term="Figma"/>
        <category label="Design System" term="Design System"/>
        <category label="React" term="React"/>
        <category label="Docusaurus" term="Docusaurus"/>
        <category label="Github Pages" term="Github Pages"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[매직 마우스, 트랙패드 없이 맥 제스처 활용하기]]></title>
        <id>https://your-docusaurus-test-site.com/blog/mac-gestures-without-trackpad</id>
        <link href="https://your-docusaurus-test-site.com/blog/mac-gestures-without-trackpad"/>
        <updated>2022-06-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[손이 아파도 트랙패드를 억지로 쓰는 이유인 맥 제스처를 트랙패드 없이 쓰는 방법]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="조금-긴-서론-mac-os-제스처가-왜-중요한가">조금 긴 서론, Mac OS 제스처가 왜 중요한가.<a href="#조금-긴-서론-mac-os-제스처가-왜-중요한가" class="hash-link" aria-label="조금 긴 서론, Mac OS 제스처가 왜 중요한가.에 대한 직접 링크" title="조금 긴 서론, Mac OS 제스처가 왜 중요한가.에 대한 직접 링크">​</a></h2><p>Mac OS를 쓰면서 여러 제스처 기능(Mission Control, Desktop navigation)을 쓰지 않는다면, Mac OS 특유의 장점을 (과장 좀 보태서) 절반은 버리고 쓰는 것과 마찬가지라고 생각한다. 그만큼 평소에 아주 잘 활용하는 편인데, 컴퓨터를 쓸 때는 언제나 여러 프로그램을 실행시켜놓고 그 사이를 오가면서 작업하기 때문이다. 그렇다면 자연스럽게, 켜놓은 여러 프로그램을 어떻게 정리하고 배치할 지가 중요해진다. 프로그램을 오가는 사이 시간을 얼마나 줄일 수 있느냐가, 켜놓은 프로그램이 많아질수록 생기는 번거로움을 줄일 수 있기 때문이다.</p><p><full-image><img loading="lazy" alt="평소 내 Mac Spaces 기본 상태" src="/assets/images/my-mac-spaces-59e307058c8673735ffebbb0cf592145.png" width="1416" height="347" class="img_ev3q"></full-image>
<full-caption>
평소 내 Mac Spaces 기본 상태.
이 포스트를 쓰면서 조사하느라 처음 알게 된 사실인데, Mac에서 Mission Control을 실행했을 때 화면 상단에 나오는 Desktop 목록을 <a href="https://support.apple.com/ko-kr/HT204100" target="_blank" rel="noopener noreferrer">Spaces 막대</a>라고 부른다고 한다.
</full-caption></p><p>예를 들면, 나는 평소 Slack을 전체 창으로 만든 후 Desktop 왼쪽에, Figma 혹은 VS Code 처럼 전체 화면으로 고정해놓고 써도 불편하지 않은 프로그램을 Desktop 오른쪽에 두고 쓰는 편이다. 특히, 2개의 프로그램을 오가는데 화면 분할을 하기엔 답답한 작업을 해야 하는 경우 한 쪽은 Desktop에, 다른 한쪽은 전체 화면으로 만들고 좌우 이동하면서 쓰면 편해진다. 지금 이 포스트를 쓸 때도 Desktop에 Notion, 오른쪽에 Figma를 두고 이미지를 만들면서 작업하고 있다. </p><p><full-image><img loading="lazy" alt="평소 내 책상 위 디스플레이의 배치도" src="/assets/images/my-displays-c8a273a7f714e7ab7dd6375e4665e1cf.png" width="2372" height="1366" class="img_ev3q"></full-image>
<full-caption>
평소 내 책상 위 디스플레이의 배치도.
아이패드 미니를 사용중이라 Sidecar는 음악 플레이어나 상시 켜놓아야 하는 노션 Todo 페이지 정도를 켜두는 편이다.
</full-caption></p><p>다만, 좌우 화면을 활용한다고 해도, 개수가 늘어나면 좌우 이동하는 번거로움이 더 커지기 때문에 Desktop 좌우 1개에서 더 많이 전체 화면을 사용하진 않는 편이다. 대신, 외장 모니터와 아이패드 Sidecar를 같이 사용하는 경우 Desktop의 개수가 3개로 늘어나기 때문에 양 옆에 배치할 수 있는 전체 화면 프로그램의 개수도 6개까지 늘어나게 된다. 물론, 이런 사용 방식은 Destkop Navigation을 빠르게 할 수 있다는 전제가 필요하다. Desktop에는 자잘한 프로그램을 여럿 켜놓기 때문에 Mission Control도 필수다. 보통 이걸 해결하기 위해 매직 마우스, 혹은 트랙패드를 사용한다. 하지만 이 방법은 쓰고 싶지 않았다. </p><p><img loading="lazy" src="https://images.pexels.com/photos/1109543/pexels-photo-1109543.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=2" alt="트랙패드 마우스를 쓰는 장면" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="기계-덕후의-마우스-시행착오">기계 덕후의 마우스 시행착오<a href="#기계-덕후의-마우스-시행착오" class="hash-link" aria-label="기계 덕후의 마우스 시행착오에 대한 직접 링크" title="기계 덕후의 마우스 시행착오에 대한 직접 링크">​</a></h2><p>트랙패드를 기껏 구매해놓고 몇 달간 써본 후에 깨달았는데, 일반적인 마우스에 비해 손가락 끝에 더 힘이 가는 구조 때문에 오래 쓰기 어려웠다. 특히 드래그 앤 드롭을 해야 할 경우 몇 배나 힘이 더 들어가기 때문에 간단한 이미지 편집 작업을 할 일이 생기면 손이 아파서 짜증이 날 지경이었다. 매직 마우스는 제대로 써본 적이 없지만 트랙패드와 비슷하게 마우스의 높이가 굉장히 낮아서 손 건강에 좋지 않을 것 같다는 인상은 그대로였다.</p><p><half-image><img loading="lazy" alt="MX Master 시리즈" src="/assets/images/mx-master-068f45ef9ebb0cdb14c46825d5a2d637.png" width="572" height="491" class="img_ev3q"></half-image>
<half-image><img loading="lazy" alt="MX Anywhere 3" src="/assets/images/mx-anywhere-3-86ab9ea097bab31754ddd5e5c2ac0c66.png" width="944" height="811" class="img_ev3q"></half-image></p><p><half-caption>내겐 너무 무거웠던 MX Master 시리즈</half-caption>
<half-caption>당시 구매했던 MX Anywhere 시리즈</half-caption></p><p>그래서 처음 시도한 방법은 로지텍의 MX Anywhere 시리즈 마우스를 사는 것이었다.보통 고급형 사무용 마우스를 찾다보면 나오는 제품이다. 관련 시리즈로 Master 3S 제품도 유명하지만, 가격이 10만원 중반대로 좀 더 비쌌고, 지인에게 잠깐 빌려서 써본 감상으로는 무게감이 꽤 있는 편이라 부담스러웠다. 그래서 가격이 10만원 안쪽으로 조금 더 싸고 기능 스펙은 거의 동일한 Anywhere 시리즈를 구매해서 사용했는데 꽤 만족했다. </p><p><img loading="lazy" src="https://resource.logitech.com/w_1800,h_1800,c_limit,q_auto,f_auto,dpr_1.0/d_transparent.gif/content/dam/logitech/en/software/options/logi-options-feature-desktop.png?v=1" alt="로지텍 마우스 커스텀 소프트웨어" class="img_ev3q"></p><p>이 제품으로 문제가 해결됐던 이유는, 로지텍에서 제공하는 Logitech Options라는 소프트웨어로 각 버튼에 맵핑된 동작을 커스터마이징할 수 있는데, 프리셋에 아얘 Mac OS를 고려한 제스처 조합이 설정되어 있었기 때문이다. 문제는 1년 좀 안되게 쓰기 시작하니까 마우스 연결이 불안정해지는 문제가 생겼다는 점이다. 그런던 중, 컴퓨터를 바꾸고 회사를 옮기며 정신없는 와중에 고장난 기계나 다름 없던 로지텍 마우스는 어딘가 서랍에 넣어두었다. 이제 새 마우스를 사야 하는데…  문득 생각이 났다. 그 비싼 로지텍 마우스로도 결국 키 맵핑으로 해결했는데, 그럼 일반 버튼 많은 마우스 사다가 내가 직접 키 맵핑을 하면 되지 않을까?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="이럴거면-비싼-마우스는-왜-샀을까">이럴거면 비싼 마우스는 왜 샀을까…<a href="#이럴거면-비싼-마우스는-왜-샀을까" class="hash-link" aria-label="이럴거면 비싼 마우스는 왜 샀을까…에 대한 직접 링크" title="이럴거면 비싼 마우스는 왜 샀을까…에 대한 직접 링크">​</a></h2><p><full-image><img loading="lazy" alt="카라바이너 사용 화면 스크린 캡처" src="/assets/images/screen-capture-karabiner-2831172c0be1ee6790ba5414476a062a.png" width="2000" height="1144" class="img_ev3q"></full-image></p><p>이 생각이 가능했던 이유는 이미 <a href="https://karabiner-elements.pqrs.org/" target="_blank" rel="noopener noreferrer">Karabiner-elements라는 소프트웨어</a>를 사용하던 중, 마우스 제어도 가능하다는 점을 어렴풋이 알고 있었기 때문이다. Mac OS를 고려하지 않는 일반 키보드를 사용할 때, option/command 키 설정을 위해서 설치하게 되는 프로그램이다. 컴퓨터에 마우스를 연결해놓은 상태에서 마우스 버튼을 제어할 수 있도록 설정을 켜면, 거의 제약없이 자유자재로 마우스 키를 커스터마이징할 수 있다. 이 덕분에 나는 싸서 부담없고 만만한 마우스를 사다가, 7만원은 들었던 로지텍 마우스, 10만원 넘게 준 트랙패드와 동일한 사용 환경을 만들 수 있었다. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2만원대-마우스로-매직-마우스트랙패드-대체하기">2만원대 마우스로 매직 마우스/트랙패드 대체하기<a href="#2만원대-마우스로-매직-마우스트랙패드-대체하기" class="hash-link" aria-label="2만원대 마우스로 매직 마우스/트랙패드 대체하기에 대한 직접 링크" title="2만원대 마우스로 매직 마우스/트랙패드 대체하기에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-준비물--남는-버튼이-3개-있는-마우스">1. 준비물 : 남는 버튼이 3개 있는 마우스<a href="#1-준비물--남는-버튼이-3개-있는-마우스" class="hash-link" aria-label="1. 준비물 : 남는 버튼이 3개 있는 마우스에 대한 직접 링크" title="1. 준비물 : 남는 버튼이 3개 있는 마우스에 대한 직접 링크">​</a></h3><p><center-image><img loading="lazy" alt="로지텍 G102 시리즈" src="/assets/images/logitech-g-653dda37272cad12589de91405e4ed9a.png" width="692" height="519" class="img_ev3q"></center-image>
<full-caption>지금 잘 쓰고 있는 <a href="https://www.logitechg.com/ko-kr/products/gaming-mice/g102-prodigy-gaming-mouse.910-004849.html" target="_blank" rel="noopener noreferrer">로지텍 G102 시리즈</a>
쿠팡에서 2만원 초반대라서 설사 또 망가져도(?) 비교적 상관없다는 마음으로 편하게 쓸 수 있다.</full-caption></p><p>Mission Control, Desktop Left, Desktop Right를 키 맵핑할 것이기 때문에 최소 3개의 버튼이 필요하다. 그래서 보통 브라우저 이전/다음 용도로 쓰이는 보조 키가 달려있고, 마우스 휠이 버튼으로도 쓰일 수 있도록 눌리는 마우스가 필요하다. 물론, 키 3개만 확보되면 되므로 마우스 휠 외에 dpi 버튼을 활용하는 것도 방법이다.  </p><p>나는 마우스 휠을 mission control, 마우스 왼쪽 보조키의 좌/우를 각각 Desktop Left, Desktop Right에 맵핑했다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-karabiner-elements-설치하고-마우스-제어-권한-주기">2. Karabiner-elements 설치하고 마우스 제어 권한 주기<a href="#2-karabiner-elements-설치하고-마우스-제어-권한-주기" class="hash-link" aria-label="2. Karabiner-elements 설치하고 마우스 제어 권한 주기에 대한 직접 링크" title="2. Karabiner-elements 설치하고 마우스 제어 권한 주기에 대한 직접 링크">​</a></h3><p>그리고 당연히 Mac에 <a href="https://karabiner-elements.pqrs.org/" target="_blank" rel="noopener noreferrer"><strong>Karabiner-elements</strong></a>가 설치되어 있어야 한다. 그리고 조금 위에 캡처 화면에 나온 것처럼 <strong>Devices &gt; Basic Configuration</strong>에서 내 마우스 이름 왼쪽에 체크박스가 체크되어 있는 상태여야 한다. 이는 마우스 키를 제어할 수 있는 권한을 Karabiner-elements에게 부여하는 과정이다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-나만의-키-맵핑-추가하기">3. 나만의 키 맵핑 추가하기<a href="#3-나만의-키-맵핑-추가하기" class="hash-link" aria-label="3. 나만의 키 맵핑 추가하기에 대한 직접 링크" title="3. 나만의 키 맵핑 추가하기에 대한 직접 링크">​</a></h3><p><full-image><img loading="lazy" alt="카라바이너 rule 추가하기" src="/assets/images/karabiner-1-2fa4623df5943b712746e2241e90aa37.png" width="993" height="571" class="img_ev3q"></full-image></p><p><strong>Complex modifications</strong> 탭에 들어가면 내가 직접 설정한 키 조합 규칙을 추가할 수 있다. 왼쪽 아래에 있는 <strong>Add rule</strong> 버튼을 누르면 아래와 같은 화면을 볼 수 있다. 여기서 화면 상단에 있는 <strong>Import more rules from the internet (open a web browser)</strong> 버튼을 누르면 Karabiner-elements 커뮤니티에 전세계 다양한 사람들이 올려놓은 다양한 규칙들을 볼 수 있다.</p><p><full-image><img loading="lazy" alt="카라바이너 rule 추가하기" src="/assets/images/karabiner-2-01775e9a3b87d0234f537de18517689a.png" width="885" height="385" class="img_ev3q"></full-image></p><p>여기서 아쉬운 점은 import하는 방식이 아니라 새 규칙을 직접 작성해서 추가하는 것은 위 화면상에서 불가능하다는 점이다. 규칙이 적혀있는 json 파일에 직접 접근해서, 규칙 부분을 편집해야 한다. 이 json 파일은 <strong>/Users/{user name}/.config/karabiner/karabiner.json</strong> 경로에 위치한다.</p><p><full-image><img loading="lazy" alt="카라바이너 rule 추가하기" src="/assets/images/karabiner-3-080cba6441e89dd6f1610fd0613ffc0a.png" width="671" height="319" class="img_ev3q"></full-image></p><p>Spotlight를 켜서 경로값을 직접 입력해서 폴더를 열거나, Finder로 폴더에 접근하는 방법이 있다. <strong>.config</strong>라는 숨겨진 폴더 안에 있기 때문에 Finder로 들어가려면 숨김 폴더가 보여지도록 설정을 바꿔주어야 한다. Finder에서 특정 폴더에 들어간 상태에서 <strong>Shift + Command + .</strong>을 누르면 숨김 폴더가 보이도록 on/off할 수 있다.</p><p>그리고 편한 editor 프로그램으로 <strong>karabiner.json</strong>을 열면 여러 설정값들이 들어있는 json 파일을 볼 수 있을 것이다. 여기서 아래와 같은 코드 부분을 찾아야 한다.</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv codeBlockLinesWithNumbering_o6Pm"><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token property">"rules"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token property">"description"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"my first rule description"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token property">"manipulators"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">...</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token property">"description"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"my second rule description"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token property">"manipulators"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">...</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">...</span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>karabiner-elements를 처음 쓴다면 추가된 rule이 아무것도 없으므로 <strong>rules</strong>의 값이 비어있을 것이다. 이제 이 곳에 나만의 rule을 아래와 같이 추가해줄 것이다.</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv codeBlockLinesWithNumbering_o6Pm"><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token property">"description"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"mouse wheel to mission_control"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token property">"manipulators"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token property">"from"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">                    </span><span class="token property">"pointing_button"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"button3"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token property">"to"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">                    </span><span class="token property">"key_code"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"mission_control"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token property">"type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"basic"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token property">"description"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"button4/button5 to Desktop Navigation"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">    </span><span class="token property">"manipulators"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token property">"from"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">                    </span><span class="token property">"pointing_button"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"button4"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token property">"to"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">                    </span><span class="token property">"key_code"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"left_arrow"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">                    </span><span class="token property">"modifiers"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">"left_control"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token property">"type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"basic"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token property">"from"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">                    </span><span class="token property">"pointing_button"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"button5"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token property">"to"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">                    </span><span class="token property">"key_code"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"right_arrow"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">                    </span><span class="token property">"modifiers"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">"left_control"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span></span><br></span><span class="token-line codeLine_lJS_" style="color:#bfc7d5"><span class="codeLineNumber_Tfdd"></span><span class="codeLineContent_feaV"><span class="token plain">            </span><span class="token property">"type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"basic"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>여기서 <strong>description</strong>은 Karabiner-elements 프로그램상에서 보이는 rule의 설명을 적는 곳이다. 그리고 <strong>manipulators</strong>안에 어떤 키를 어떤 동작에 맵핑할 것인지를 정의한다.</p><p>Karabiner-elements는 마우스 좌우 클릭 버튼을 각각 button1, 2로, 마우스 휠 버튼을 button3로 인식한다. 그리고 보통 마우스 왼쪽에 있는 좌/우 버튼을 각각 button4, button5로 인식하기 때문에 각 버튼 번호에 맞춰서 제스처를 맵핑했다.</p><p>다른 마우스 버튼에 맵핑하고 싶은 경우 임시로 button1, 2, 3 등에다가 a, b, c 같은 알파벳이 눌리도록 설정한 후, 직접 눌러보면 된다. 이 때 입력되는 알파벳을 보고 버튼의 번호를 알아낼 수 있다. 그 후에 위 json 작성법에서 pointing_button에 버튼 번호를 넣어주면 된다. 1개의 키만 맵핑한다면 <strong>"key_code" : {key name}</strong>으로 끝내면 되지만, 한 번에 여러 버튼을 조합하는 경우라면 <strong>key_code : {key name}, "modifiers" : <!-- -->["key name", "key name"]</strong>와 같이 입력하면 된다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="마치며">마치며<a href="#마치며" class="hash-link" aria-label="마치며에 대한 직접 링크" title="마치며에 대한 직접 링크">​</a></h2><p>Karabiner-elements는 내가 구현하고 싶은 온갖 키 맵핑을 자유자재로 할 수 있다는 점에서 아주 강력한 툴이다. <a href="https://cdmanii.com/5119" target="_blank" rel="noopener noreferrer">보조 버튼이 무슨 SF 영화에 등장할 것 같은 디자인으로 많은 마우스</a>도 봤었는데… 전문 작업을 오래 하는 사람이라면 프로그램별 단축키를 맵핑해놓는 것도 쏠쏠한 생산성 증진이지 않을까 싶다.</p>]]></content>
        <author>
            <name>하미연</name>
        </author>
        <category label="생산성" term="생산성"/>
        <category label="툴 활용 팁" term="툴 활용 팁"/>
    </entry>
</feed>